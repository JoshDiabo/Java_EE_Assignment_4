#https://app.swaggerhub.com/help/tutorials/openapi-3-tutorial
openapi: 3.0.0
info:
  description: "This is the REST 'contract' for the Employee System"
  version: "1.0.0"
  title: "(20W) Assignment 4 - Employee System"

servers:
  - url: 'http://localhost:{port}/{contextRoot}/{basePath}'
    variables:
      contextRoot:
         default: 'make-progress'
      basePath:
        default: 'api/v1'
      port:
        default: '8080'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  
  responses:
    UnauthorizedAdminError:
      description: request requires HTTP authentication for ADMIN_ROLE
    UnauthorizedUserError:
      description: request requires HTTP authentication for USER_ROLE
    NotFound:
      description: The specified resource was not found
  
  schemas:
  
    Employee:
      description: (20W) Assignment 4 - EmployeeSystem employee
      type: object
      required:
        - id
      properties:
        id:
          description: ID of  entity
          type: integer
        version:
          description: version (OptLock) of entity
          type: integer
        createdDate:
          description: creation timestamp of entity
          type: string
          format: date-time
        updatedDate:
          description: last-update timestamp of entity
          type: string
          format: date-time
        firstName:
          type: string
          description: First Name of the employee
          example: 'John'
        lastName:
          type: string
          description: Last Name of the employee
          example: 'Doe'
        email:
          type: string
          description: Email of the employee
          example: 'John.Doe@gmail.com'
        title:
          type: string
          description: Title of the employee
          example: 'Prof.'
        salary:
          type: number
          format: double
          description: Salary of the employee
          example: 100.0
        # additional for Address/Phone/Project/EmployeeTasks
        
    Address:
      description: (20W) Assignment 4 - EmployeeSystem address
      type: object
      required:
        - id
      properties:
        id:
          description: ID of  entity
          type: integer
        version:
          description: version (OptLock) of entity
          type: integer
        createdDate:
          description: creation timestamp of entity
          type: string
          format: date-time
        updatedDate:
          description: last-update timestamp of entity
          type: string
          format: date-time
        city:
          type: string
          description: City name
          example: 'Ottawa'
        country:
          type: string
          description: Country name
          example: 'Canada'
        postal:
          type: string
          description: Postal Code
          example: 'K2G 7Z2'
        state:
          type: string
          description: State
          example: 'ON.'
        street:
          type: string
          description: Street name
          example: "Sesame"

    EmployeesList:
        description: list of employees
        type: object
        properties:
          employees:
            type: array
            items:
              $ref: '#/components/schemas/Employee'
    
    AddressList:
        description: list of addresses
        type: object
        properties:
          addresses:
           type: array
           items:
            $ref: '#/components/schemas/Address'

security:
  - basicAuth: []
  
paths:
 /employees:
  get:
    responses:
      401:
         $ref: '#/components/responses/UnauthorizedAdminError'
      200:
        description: OK
        content:
          application/json:
           schema:
             $ref: '#/components/schemas/EmployeesList'
  post:
        summary: Create an Employee

        parameters:
        - in: path
          name: employee
          required: true
          description: Employee to Create
          schema:
            
            $ref: '#/components/schemas/Employee'
        
          
        responses:
            401:
               $ref: '#/components/responses/UnauthorizedAdminError'
            200:
               description: OK
               content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Employee'

  delete:
      summary: Delete an Employee
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the employee to delete
      responses:
          200:
           description: OK
           content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Employee'
          401:
            $ref: '#/components/responses/UnauthorizedUserError'
          404:
            $ref: '#/components/responses/NotFound'
  put:
      summary: Update an Employee
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the employee to delete
          
        - in: path
          name: employee
          description: Employee to Create
          required: true
          schema:
            
            $ref: '#/components/schemas/Employee'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        401:
          $ref: '#/components/responses/UnauthorizedUserError'
        404:
          $ref: '#/components/responses/NotFound'
          
 /employees/{id}:
    get:
      summary: Retrieves an employee by its id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the employee to retrieve

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        401:
          $ref: '#/components/responses/UnauthorizedUserError'
        404:
          $ref: '#/components/responses/NotFound'
          
 /addresses:
  get:
    responses:
      401:
         $ref: '#/components/responses/UnauthorizedAdminError'
      200:
        description: OK
        content:
          application/json:
           schema:
             $ref: '#/components/schemas/AddressList'

  post:
        summary: Create an Adress

        parameters:
        - in: path
          name: address
          required: true
          description: Address to Create
          schema:
            
            $ref: '#/components/schemas/Address'
        
          
        responses:
            401:
               $ref: '#/components/responses/UnauthorizedAdminError'
            200:
               description: OK
               content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Address'
                    
  delete:
      summary: Delete an Address
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the address to delete
      responses:
          200:
           description: OK
           content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Address'
          401:
            $ref: '#/components/responses/UnauthorizedUserError'
          404:
            $ref: '#/components/responses/NotFound'
  put:
      summary: Update an Address
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the address to delete
          
        - in: path
          name: address
          description: Address to Create
          required: true
          schema:
            
            $ref: '#/components/schemas/Address'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        401:
          $ref: '#/components/responses/UnauthorizedUserError'
        404:
          $ref: '#/components/responses/NotFound'
