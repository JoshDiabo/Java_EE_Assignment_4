#https://app.swaggerhub.com/help/tutorials/openapi-3-tutorial
openapi: 3.0.0
info:
  description: "This is the REST 'contract' for the Employee System"
  version: "1.0.0"
  title: "(20W) Assignment 4 - Employee System"

servers:
  - url: 'http://localhost:{port}/{contextRoot}/{basePath}'
    variables:
      contextRoot:
         default: 'make-progress'
      basePath:
        default: 'api/v1'
      port:
        default: '8080'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  responses:
    UnauthorizedAdminError:
      description: request requires HTTP authentication for ADMIN_ROLE
    UnauthorizedUserError:
      description: request requires HTTP authentication for USER_ROLE
    NotFound:
      description: The specified resource was not found

  schemas:
    Employee:
      description: (20W) Assignment 4 - EmployeeSystem employee
      type: object
      required:
        - id
      properties:
        id:
          description: ID of  entity
          type: integer
        version:
          description: version (OptLock) of entity
          type: integer
        createdDate:
          description: creation timestamp of entity
          type: string
          format: date-time
        updatedDate:
          description: last-update timestamp of entity
          type: string
          format: date-time
        firstName:
          type: string
          description: First Name of the employee
          example: 'John'
        lastName:
          type: string
          description: Last Name of the employee
          example: 'Doe'
        email:
          type: string
          description: Email of the employee
          example: 'John.Doe@gmail.com'
        title:
          type: string
          description: Title of the employee
          example: 'Prof.'
        salary:
          type: number
          format: double
          description: Salary of the employee
          example: 100.0
        tasks:
          type: array
          items:
            type: object
            properties:
              owningEmpId:
                description: id of owning employee
                type: integer
              description:
                description: description of task
                type: string
              done:
                description: is the task done or not
                type: boolean
              taskStart:
                description: task start time
                type: string
                format: date-time
              taskEndDate:
                description: task end time
                type: string
                format: date-time

    Address:
      description: (20W) Assignment 4 - EmployeeSystem address
      type: object
      required:
        - id
      properties:
        id:
          description: ID of  entity
          type: integer
        version:
          description: version (OptLock) of entity
          type: integer
        createdDate:
          description: creation timestamp of entity
          type: string
          format: date-time
        updatedDate:
          description: last-update timestamp of entity
          type: string
          format: date-time
        city:
          type: string
          description: City name
          example: 'Ottawa'
        country:
          type: string
          description: Country name
          example: 'Canada'
        postal:
          type: string
          description: Postal Code
          example: 'K2G 7Z2'
        state:
          type: string
          description: State
          example: 'ON.'
        street:
          type: string
          description: Street name
          example: "Sesame"

    Project:
      description: (20W) Assignment 4 - EmployeeSystem project
      type: object
      required:
        - id
      properties:
        id:
          description: ID of  entity
          type: integer
        version:
          description: version (OptLock) of entity
          type: integer
        createdDate:
          description: creation timestamp of entity
          type: string
          format: date-time
        updatedDate:
          description: last-update timestamp of entity
          type: string
          format: date-time
        description:
          type: string
          description: description of project
          example: 'This project is for a new program.'
        name:
          type: string
          description: Project name
          example: 'HR - ProjOne'

    Phone:
      description: (20W) Assignment 4 - EmployeeSystem phone
      type: object
      required:
        - id
      properties:
        id:
          description: ID of  entity
          type: integer
        version:
          description: version (OptLock) of entity
          type: integer
        createdDate:
          description: creation timestamp of entity
          type: string
          format: date-time
        updatedDate:
          description: last-update timestamp of entity
          type: string
          format: date-time
        phoneType:
          type: string
          description:  Type of phone - W, H, M
          example: "W"
        areaCode:
          type: string
          description: Area code for phone
          example: "613"
        phoneNumber:
          type: string
          description: Phone number belonging to phone
          example: "914-9021"
        mapCoords:
          type: string
          description: Map coordinates for home
          example: "44.564811457735° N   133.058411636261° W"
        department:
          type: string
          description: department
          example: "HR"
        provider:
          type: string
          description: Phone provider
          example: "Rogers"

    PhoneList:
        description: list of phones
        type: object
        properties:
          phones:
           type: array
           items:
            $ref: '#/components/schemas/Phone'

    ProjectList:
        description: list of projects
        type: object
        properties:
          projects:
           type: array
           items:
            $ref: '#/components/schemas/Project'

    EmployeesList:
        description: list of employees
        type: object
        properties:
          employees:
            type: array
            items:
              $ref: '#/components/schemas/Employee'

    AddressList:
        description: list of addresses
        type: object
        properties:
          addresses:
           type: array
           items:
            $ref: '#/components/schemas/Address'

security:
  - basicAuth: []

paths:
  /employees:
    get:
      summary: Gets all employees
      responses:
        401:
          $ref: '#/components/responses/UnauthorizedAdminError'
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeesList'
    post:
      summary: Create an Employee
      parameters:
        - in: path
          name: employee
          required: true
          description: Employee to Create
          schema:
            $ref: '#/components/schemas/Employee'
      responses:
        401:
          $ref: '#/components/responses/UnauthorizedAdminError'
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Employee'

  /employees/{id}:
    get:
      summary: Retrieves an employee by its id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the employee to retrieve
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        401:
          $ref: '#/components/responses/UnauthorizedUserError'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete an Employee
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the employee to delete
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        401:
          $ref: '#/components/responses/UnauthorizedUserError'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update an Employee
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the employee to delete

        - in: path
          name: employee
          description: Employee to Create
          required: true
          schema:
            $ref: '#/components/schemas/Employee'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        401:
          $ref: '#/components/responses/UnauthorizedUserError'
        404:
          $ref: '#/components/responses/NotFound'

  /addresses:
    get:
      summary: Gets all addresses
      responses:
        401:
          $ref: '#/components/responses/UnauthorizedAdminError'
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressList'
    post:
      summary: Create an Adress
      parameters:
        - in: path
          name: address
          required: true
          description: Address to Create
          schema:
            $ref: '#/components/schemas/Address'
      responses:
        401:
          $ref: '#/components/responses/UnauthorizedAdminError'
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'

  /addresses/{id}:
    get:
      summary: Retrieves an address by its id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the address to retrieve
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        401:
          $ref: '#/components/responses/UnauthorizedUserError'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete an Address
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the address to delete
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        401:
          $ref: '#/components/responses/UnauthorizedUserError'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update an Address
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the address to delete
        - in: path
          name: address
          description: Address to Create
          required: true
          schema:
            $ref: '#/components/schemas/Address'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        401:
          $ref: '#/components/responses/UnauthorizedUserError'
        404:
          $ref: '#/components/responses/NotFound'

  /projects:
    get:
      summary: Get all projects
      responses:
        401:
          $ref: '#/components/responses/UnauthorizedAdminError'
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectList'
    post:
      summary: Create a Project
      parameters:
        - in: path
          name: projects
          required: true
          description: Project to Create
          schema:
            $ref: '#/components/schemas/Project'
      responses:
        401:
          $ref: '#/components/responses/UnauthorizedAdminError'
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /projects/{id}:
    get:
      summary: Retrieves a project by its id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the project to retrieve
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          $ref: '#/components/responses/UnauthorizedUserError'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a Project
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the project to delete
      responses:
          200:
           description: OK
           content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Project'
          401:
            $ref: '#/components/responses/UnauthorizedUserError'
          404:
            $ref: '#/components/responses/NotFound'
    put:
      summary: Update a Project
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the project to delete
        - in: path
          name: projects
          description: Project to Create
          required: true
          schema:
            $ref: '#/components/schemas/Project'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          $ref: '#/components/responses/UnauthorizedUserError'
        404:
          $ref: '#/components/responses/NotFound'

  /phones:
    get:
      summary: Get all phones
      responses:
        401:
          $ref: '#/components/responses/UnauthorizedAdminError'
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhoneList'
    post:
      summary: Create a Phone
      parameters:
        - in: path
          name: phones
          required: true
          description: Phone to Create
          schema:
            $ref: '#/components/schemas/Phone'
      responses:
        401:
          $ref: '#/components/responses/UnauthorizedAdminError'
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phone'

  /phones/{id}:
    get:
      summary: Retrieves a phone by its id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the phone to retrieve
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phone'
        401:
          $ref: '#/components/responses/UnauthorizedUserError'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a Phone
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the phone to delete
      responses:
          200:
           description: OK
           content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Phone'
          401:
            $ref: '#/components/responses/UnauthorizedUserError'
          404:
            $ref: '#/components/responses/NotFound'
    put:
      summary: Update a Phone
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: numeric id of the phone to delete
        - in: path
          name: phones
          description: Phone to Create
          required: true
          schema:
            $ref: '#/components/schemas/Phone'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phone'
        401:
          $ref: '#/components/responses/UnauthorizedUserError'
        404:
          $ref: '#/components/responses/NotFound'
